//=================================================
// In this script we compute the 7-torsion field of
// a certain elliptic curve over a quadratic number
// field.
//=================================================

// Define the base number field K = Q(a), where a satisfies a^2 - a + 2 = 0
R<x> := PolynomialRing(Rationals());
K<a> := NumberField(R![2, -1, 1]);

// Define the elliptic curve E over K
E := EllipticCurve([
    K![0,0],         // a_1 = 0
    K![1,-1],        // a_2 = -a + 1
    K![0,0],         // a_3 = 0
    K![-166,37],     // a_4 = 37a - 166
    K![808,-148]     // a_6 = -148a + 808
]);

// Compute the 7-division polynomial of E over K[x]
dp7 := DivisionPolynomial(E, 7);  // Polynomial whose roots are x-coordinates of 7-torsion points

// Switch to a bivariate polynomial ring S = K[x, y]
S<x, y> := PolynomialRing(K, 2);

// Coerce dp7 into the bivariate ring, treating it as a function of x alone
h := hom<Parent(dp7) -> S | [x]>;
dp7 := h(dp7);

// Define the Weierstrass equation y² = RHS of E in S
polE := y^2 - (x^3 + (-a + 1)*x^2 + (37*a - 166)*x + (-148*a + 808));

// Compute the resultant with respect to x
// This eliminates y and gives a univariate polynomial in x
// whose roots are the x-coordinates of points P ∈ E[7] \ {O}
res := Resultant(dp7, polE, x);

// Now we work in the univariate polynomial ring T = K[x]
T<x> := PolynomialRing(K);

// Coerce the resultant and dp7 into T
h2 := hom<S -> T | [x, x]>;
res := h2(res);
dp7 := h2(dp7);

// The splitting field of the product of res and dp7
// contains (and is generated by) the x- and y-coordinates
// of all points in E[7]. We compute the degree of K(E[7])
// over K by computing the Galois group of res*dp7
time G := GaloisGroup(res * dp7);

// Check that the extension degree [F:K] is 42
"Degree of the extension [F:K] =", #G;
